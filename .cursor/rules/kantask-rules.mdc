---
description: 
globs: 
alwaysApply: true
---
# KanTask - Development Instructions

This is a TanStack Start project for a trello like management application. Follow these guidelines when developing for this project.

## Project Architecture

- **Routing**: Uses `@tanstack/react-router`. Route files are in the `/routes` folder. Root layout is in `__root.tsx`.
- **API Structure**: Server functions are created with `createServerFn()` from `@tanstack/react-start`.
- **State Management**: TanStack Query is used for data fetching, caching, and state management.

## Technology Stack

- **Framework**: TanStack Start + React
- **Routing**: `@tanstack/react-router`
- **UI Components**: shadcn/ui component library
- **Forms**: TanStack Form with the custom `useAppForm` hook
- **API**: Server functions with `createServerFn()` from `@tanstack/react-start`
- **Styling**: Tailwind CSS
- **Database, ORM, & Zero-Sync**: Postgres Database with Drizzle ORM, Zero Sync

## Code Organization

- `/src/routes/` - All route components
- `/src/components/` - Reusable React components
- `/src/services/` - API service functions organized by domain (auth, events, etc.)
- `/src/lib/` - Utility functions and configurations
- `/src/components/ui/` - shadcn/ui components
- `/src/lib/db/schema/*` - All schema files are here

## Project Structure

kantask/
├── src/
│   ├── routes/          # Route components
│   ├── components/      # Reusable React components
│   ├── services/        # API service functions
│   ├── lib/            # Utilities and configurations
│   │   ├── db/        # Database schemas
│   │   └── form/      # Form utilities
│   └── components/ui/  # shadcn/ui components
├── public/             # Static assets
└── [config files]      # Various configuration files

## Database Access

Use drizzle

### Form Management

```typescript
import { useAppForm } from "~/lib/form"
import { yourSchema } from "~/services/your-schema"

function YourComponent() {
  const form = useAppForm({
    schema: yourSchema,
    defaultValues: {},
    onSubmit: async (values) => {
      // Handle form submission
    },
  })

  // Use form.register, form.formState, etc.
}
```

### Routes and Navigation

```typescript
import { createFileRoute, useNavigate } from "@tanstack/react-router"

export const Route = createFileRoute("/your-path/")({
  beforeLoad: ({ context }) => {
    // Pre-load data if needed
    context.queryClient.ensureQueryData(yourQueries.list())
  },
  component: YourComponent,
})

function YourComponent() {
  const navigate = useNavigate()
  // Component implementation
}
```

## Error Handling

- Use toast notifications for user-facing errors
- Handle zod validation errors appropriately
- Use error boundaries for component-level error handling

## Getting Started

- Environment setup required (.env file)
- Database configuration via Drizzle
- Development server can be started with appropriate package manager commands

## Development Workflow

- Create routes in the /routes directory
- Implement components in /components
- Define database schemas in /lib/db/schema
- Create API services in /services
- Use shadcn/ui components for consistent UI

## Code Style

- TypeScript for type safety
- Tailwind CSS for styling
- Prettier for code formatting
- ESLint for code quality
- This project follows modern web development practices with a focus on type safety, component reusability, and maintainable code structure. It's designed to be scalable and follows a clear architectural pattern for easy development and maintenance.
